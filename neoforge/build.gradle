plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'

        //Limit ram usage for the dev environment to 4GB
        jvmArgument '-Xmx4G'

        systemProperty 'mixin.env.disableRefMap', 'true'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        programArgument '--nogui'
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly project(":common")

    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}"

    implementation "dev.architectury:architectury-neoforge:${architectury_version}"
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

if (System.getenv().CURSEFORGE_KEY) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv().CURSEFORGE_KEY

        def mainFile = upload(project.curseforge_id, jar)
        mainFile.releaseType = 'release'
        mainFile.addGameVersion "NeoForge"
        mainFile.addGameVersion "${minecraft_version}"
        mainFile.addGameVersion "Java 21"

        mainFile.changelog = file("$project.rootDir/changelog.md")
        mainFile.changelogType = 'markdown'

        mainFile.addRequirement("roughly-enough-items")
    }
}

if (System.getenv().MODRINTH_KEY) {
    String fileContents = file("$project.rootDir/changelog.md").text
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "release"
        versionName = "${mod_name} ${minecraft_version}"
        versionNumber = project.version
        uploadFile = jar
        changelog = fileContents
        gameVersions = ["${minecraft_version}"]
        loaders = ["neoforge"]

        dependencies {
            required.project "rei"
        }
    }
}